#!/usr/bin/perl

use strict;
use warnings;
use utf8;
use vars qw/ %opt /;
use feature 'switch';

$|++;
$SIG{CHLD} = 'IGNORE';

##
## include
##

use ShellOS::Common;
use ShellOS::Config;
use ShellOS::ServiceInvoker;

use File::Basename;
use Getopt::Std;
use IO::Socket;

##
## functions
##

sub usage() {

    my $script = basename($0);

    print STDOUT << "EOF";
Usage: $script
    -h : help
EOF
}

sub proceed {

    # get configuration options
    my $conf = new ShellOS::Config();

    # open socket
    my $socketfile = $conf->get('socket');
    unlink($socketfile);
    my $socket = new IO::Socket::UNIX(
        Type => SOCK_STREAM,
        Local => $socketfile,
        Listen => 10
    );
    die("Could not create UNIX socket: $!\n") unless($socket);
    chmod(0666, $socket);
    binmode($socket, ':utf8');

    # wait for connection
    while(my $client = $socket->accept()) {

        binmode($client, ':utf8');
        setsockopt($client, SOL_SOCKET, SO_PASSCRED, 1);
        my($pid, $uid, $gid) = unpack("iii", $client->sockopt(SO_PEERCRED));

        # client must have UID
        if(!defined($uid)) {
            print "WARNING: UID not defined!\n";
            close($client);
            next;
        }
        # chceck if UID is allowed
        if(($uid != 0 && $gid != 0) && ($uid != 500 && $gid != 500) &&
                ($uid < $conf->get('user_min_id') || $conf->get('user_max_id') < $uid ||
                $gid < $conf->get('group_min_id') || $conf->get('group_max_id') < $gid)) {
            print "WARNING: UID $uid is not allowed!\n";
            close($client);
            next;
        }

        if(fork() == 0) {
            $client->autoflush(1);

            # check if user with given UID exists
            my $username = getpwuid($uid);
            if(!defined($username)) {
                print "ERROR: User with given UID $uid does not exist!\n";
                close($client);
                next;
            }

            while(<$client>) {

                chomp();
                my @args = split(/\s/, $_);
                my $pwd = shift @args;
                my $service = shift @args || 'help';
                my $entity = shift @args || '(none)';
                my $action = shift @args || '(none)';

                # log client connection
                if(scalar(@args) > 0) {
                    print "clinet: $username UID=$uid GID=$gid PID=$pid, service: $service, entity: $entity, action: $action, arguments: " . join(' ', @args) . "\n";
                }
                else {
                    print "clinet: $username UID=$uid GID=$gid PID=$pid, service: $service, entity: $entity, action: $action\n";
                }

                # call service
                my $result;
                my $si = new ShellOS::ServiceInvoker(uid => $uid);
                if($service ne 'help' && $service ne 'list') {
                    $result = $si->call($service, $entity, $action, @args);
                }

                # if result is undefined print help
                if(defined($result)) {
                    print $client $result . "\n";
                }
                else {
                    if($service ne 'list') {
                        print $client "\nUsage:\n\n";
                        print $client "    shellos help|list\n";
                        print $client "    shellos 'service' help\n";
                        print $client "    shellos 'service' 'entity' help\n";
                        print $client "    shellos 'service' 'entity' 'action' [arguments]\n";
                        print $client "\nAvailable services:\n\n";
                        my @list = $si->list();
                        foreach my $item (@list) {
                            print $client "    $item\n";
                        }
                        print $client "\n";
                    }
                    else {
                        my @list = $si->list();
                        foreach my $item (@list) {
                            print $client "$item\n";
                        }
                    }
                }

                last;
            }
            close($client);
            exit;
        }
    }
    close($socket);
}

##
## main
##

getopts('h', \%opt) or usage();
if($opt{h}) {
    usage();
}
else {
    proceed();
}

exit 0;

