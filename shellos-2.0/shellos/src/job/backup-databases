#!/bin/bash
#
# Scheduled job. This script backups databases.

##
## includes
##

source $SHELLOS_DIR/lib/base > /dev/null 2>&1

##
## variables
##

job_name="backup-databases"

##
## main
##

t1=$(date +%s)
msg=

# check lock
[ -f $JOB_LOCK_ALL_FILE ] && exit 0
if [ $(job_lock_exists $job_name) == "yes" ]; then
    # do not log if all jobs are locked
    [ $(job_lock_all_exists) == "no" ] && \
        log_info "job $job_name is locked"
    exit 0
fi
# set lock
job_lock_set $job_name

# ---------- BEGIN ----------

# remove database backups older than three weeks
find $BACKUP_DATABASES_DIR/* -mtime +$JOB_BACKUP_DATABASES_REMOVE_DAYS -exec rm {} \; > /dev/null 2>&1


# dump databases
databases=$(echo "show databases;" | $CMD_MYSQL --user=root --password=$(mysql_get_user_password root) | awk '{ if ( NR > 1  ) { print } }')
timestamp=$(date +"%Y%m%d%H%M")
for db in $databases; do
    if [ ! "$db" == "mysql" ] && [ ! "$db" == "information_schema" ] && [ ! "$db" == "performance_schema" ] && [ ! "$db" == "test" ]; then
        mysql_backup_database_to_archive $db $BACKUP_DATABASES_DIR/$db-$timestamp.tar.gz
    fi
done

# ---------- END ------------

# remove lock
job_lock_unset $job_name

# measure time
t2=$(date +%s)
time=$((t2-t1))

# log event only if it takes longer than specified number of seconds or there is a message
[ $time -le $JOB_LOG_EVENT_TIME ] && [ "$msg" == "" ] && exit 0
if [ "$msg" == "" ]; then
    log_info "job $job_name run (time: $time s)"
else
    log_info "job $job_name run - $msg (time: $time s)"
fi

exit 0

