package com.code4ge.jsf.ui;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

/**
 * Dojo Toolkit bootstrap class.
 * 
 * @author Daniel Stefaniuk
 */
public class Bootstrap {

    /**
     * @author Daniel Stefaniuk
     */
    public static class Dojo {

        /**
         * The Dojo Toolkit version.
         * 
         * @author Daniel Stefaniuk
         */
        public static enum Version {

            VER_1_7_0("1.7.0"),
            VER_1_7_1("1.7.1"),
            VER_1_7_2("1.7.2");

            private final String name;

            Version(String name) {

                this.name = name;
            }

            @Override
            public String toString() {

                return this.name;
            }
        }

        /**
         * The Dojo Toolkit environment.
         * 
         * @author Daniel Stefaniuk
         */
        public static enum Environment {

            /**
             * Use DEFAULT if you do not want to load any resources generated by
             * build process.
             */
            DEFAULT(""),

            /**
             * Use BUILD in production environment.
             */
            BUILD("build");

            private final String name;

            Environment(String name) {

                this.name = name;
            }

            @Override
            public String toString() {

                return this.name;
            }
        }

        /**
         * The Dojo Toolkit theme.
         * 
         * @author Daniel Stefaniuk
         */
        public static enum Theme {

            NONE(""),
            CODE4GE("code4ge");

            private final String name;

            Theme(String name) {

                this.name = name;
            }

            @Override
            public String toString() {

                return this.name;
            }
        }

        /* ================================================================== */

        private Bootstrap outer;

        private HttpServletRequest request;

        private String dojoUrl;

        private Version version = Version.VER_1_7_0;

        private Environment environment = Environment.DEFAULT;

        private Theme theme = Theme.CODE4GE;

        /* ================================================================== */

        private String fullDojoUrl;

        private Set<String> themes;

        private Set<String> styles;

        private Map<String, String> dojoConfig;

        private Set<String> layers;

        private Map<String, String> requiredModules;

        private Set<String> ready;

        /* ================================================================== */

        /**
         * Constructor
         */
        public Dojo() {

            themes = new LinkedHashSet<String>();
            styles = new LinkedHashSet<String>();
            dojoConfig = new HashMap<String, String>();
            layers = new LinkedHashSet<String>();
            requiredModules = new LinkedHashMap<String, String>();
            ready = new LinkedHashSet<String>();
        }

        /**
         * Sets the outer class.
         * 
         * @param outer
         */
        private void setOuter(Bootstrap outer) {

            this.outer = outer;
        }

        /**
         * Sets HTTP request.
         * 
         * @param request
         * @return Bootstrap.Dojo
         */
        public Dojo setRequest(HttpServletRequest request) {

            this.request = request;

            return this;
        }

        /**
         * Sets URL address of Dojo Toolkit.
         * 
         * @param dojoUrl
         * @return Bootstrap.Dojo
         */
        public Dojo setDojoUrl(String dojoUrl) {

            this.dojoUrl = dojoUrl;

            return this;
        }

        /**
         * Sets version.
         * 
         * @param version
         * @return Bootstrap.Dojo
         */
        public Dojo setVersion(Version version) {

            this.version = version;

            return this;
        }

        /**
         * Sets environment.
         * 
         * @param environment
         * @return Bootstrap.Dojo
         */
        public Dojo setEnvironment(Environment environment) {

            this.environment = environment;

            return this;
        }

        /**
         * Returns resources URL that points to the Dojo Toolkit folder. To be
         * used ONLY in the toString() method!
         * 
         * @return String
         */
        protected String getResourcesUrl() {

            return combineURL(fullDojoUrl, environment.toString());
        }

        /**
         * Sets the base theme.
         * 
         * @param theme
         * @return Bootstrap.Dojo
         */
        public Dojo setBaseTheme(Theme theme) {

            this.theme = theme;

            return this;
        }

        /**
         * Adds theme.
         * 
         * @param theme
         * @return Bootstrap.Dojo
         */
        public Dojo addTheme(String namespace) {

            String[] parts = namespace.split("\\.");

            StringBuilder sb = new StringBuilder();
            for(String part: parts) {
                sb.append("/");
                sb.append(part);
            }
            sb.append("/");
            sb.append(parts[parts.length - 1]);
            sb.append(".css");

            themes.add(sb.toString());

            return this;
        }

        /**
         * Adds CSS file to load. An URL address must be relative to the Dojo
         * Toolkit's base URL.
         * 
         * @param file
         * @return Bootstrap.Dojo
         */
        public Dojo addStyle(String file) {

            styles.add(file);

            return this;
        }

        /**
         * Adds configuration option.
         * 
         * @param name
         * @param value
         * @return Bootstrap.Dojo
         */
        public Dojo addDojoConfig(String name, String value) {

            dojoConfig.put(name, value);

            return this;
        }

        /**
         * Adds layer to load.
         * 
         * @param name
         * @return Bootstrap.Dojo
         */
        public Dojo addLayer(String name) {

            layers.add(name);

            return this;
        }

        /**
         * Adds module to load.
         * 
         * @param module
         * @param name
         * @return Bootstrap.Dojo
         */
        public Dojo requireModule(String module, String name) {

            requiredModules.put(module, name);

            return this;
        }

        /**
         * Adds JavaScript code that will be executed on load.
         * 
         * @param code
         * @return Bootstrap.Dojo
         */
        public Dojo addReady(String code) {

            ready.add(code);

            return this;
        }

        /* ================================================================== */

        private String getDjConfig() {

            StringBuilder sb = new StringBuilder();
            for(String key: dojoConfig.keySet()) {
                sb.append(key + ":" + dojoConfig.get(key) + ",");
            }
            sb.deleteCharAt(sb.length() - 1);

            return sb.toString();
        }

        /**
         * To be used ONLY in the toString() method!
         * 
         * @return String
         */
        private String getDojoScriptElement() {

            return "<script type=\"text/javascript\" " +
                "src =\""
                + combineURL(
                    fullDojoUrl,
                    environment.toString(),
                    "/dojo/dojo.js"
                )
                + outer.getUrlVersion()
                + "\" charset=\"utf-8\" data-dojo-config=\""
                + getDjConfig()
                + "\"></script>";
        }

        /**
         * To be used ONLY in the toString() method!
         * 
         * @return String
         */
        private String getLayerElement(String name) {

            return getJavaScriptElement(combineURL(fullDojoUrl, "build", name) + outer.getUrlVersion());
        }

        private String getRequiredModules() {

            StringBuilder sb = new StringBuilder();
            for(String module: requiredModules.keySet()) {
                sb.append("'" + module + "',");
            }
            if(requiredModules.size() > 0) {
                sb.deleteCharAt(sb.length() - 1);
            }

            return sb.toString();
        }

        private String getRequiredModuleNames() {

            StringBuilder sb = new StringBuilder();
            for(String module: requiredModules.keySet()) {
                sb.append(requiredModules.get(module) + ",");
            }
            if(requiredModules.size() > 0) {
                sb.deleteCharAt(sb.length() - 1);
            }

            return sb.toString();
        }

        private String getReady() {

            StringBuilder sb = new StringBuilder();
            for(String code: ready) {
                sb.append("code4ge.ready(function(){" + code + "});");
            }

            return sb.toString();
        }

        /* ================================================================== */

        /**
         * Returns an auto-generated code to bootstrap the Dojo Toolkit library.
         * 
         * @return String
         */
        @Override
        public String toString() {

            // use absolute URL if request is set
            if(request != null) {
                fullDojoUrl = combineURL(getBaseUrl(request), dojoUrl, version.toString());
            }
            else {
                fullDojoUrl = combineURL(dojoUrl, version.toString());
            }

            StringBuilder sb = new StringBuilder();

            // core style
            sb.append(getStyleSheetElement(
                combineURL(
                    fullDojoUrl,
                    environment.toString(),
                    "/dojo/resources/dojo.css") + outer.getUrlVersion()) + "\n");

            // base theme
            if(theme != Theme.NONE) {
                sb.append(getStyleSheetElement(
                    combineURL(
                        fullDojoUrl,
                        environment.toString(),
                        "/dijit/themes/claro/claro.css") + outer.getUrlVersion()) + "\n");
                sb.append(getStyleSheetElement(
                    combineURL(
                        fullDojoUrl,
                        environment.toString(),
                        "/code4ge/themes/", theme.toString(),
                        theme.toString() + ".css") + outer.getUrlVersion()) + "\n");
            }

            // themes
            for(String theme: themes) {
                sb.append(getStyleSheetElement(
                    combineURL(
                        fullDojoUrl,
                        environment.toString(),
                        theme) + outer.getUrlVersion()) + "\n");
            }

            // styles
            for(String stylesheet: styles) {
                sb.append(getStyleSheetElement(
                    combineURL(
                        fullDojoUrl,
                        environment.toString(),
                        stylesheet) + outer.getUrlVersion()) + "\n");
            }

            // core script
            sb.append(getDojoScriptElement() + "\n");

            // layers
            if(environment == Environment.BUILD) {
                for(String name: layers) {
                    sb.append(getLayerElement(name) + "\n");
                }
            }

            // required modules and ready code
            if(!requiredModules.isEmpty() || !ready.isEmpty()) {
                sb.append("<script type=\"text/javascript\">\n");
                sb.append("    require([" + getRequiredModules() + "],");
                sb.append("function(" + getRequiredModuleNames() + "){");
                sb.append(getReady());
                sb.append("});\n");
                sb.append("</script>\n");
            }

            return sb.toString();
        }
    }

    /* ================================================================== */

    private Set<String> cssFiles;

    private boolean css960gs;

    private Set<String> jsFiles;

    private String urlVersion;

    private Dojo dojo;

    /* ================================================================== */

    /**
     * Constructor
     */
    public Bootstrap() {

        cssFiles = new LinkedHashSet<String>();
        jsFiles = new LinkedHashSet<String>();
    }

    /**
     * Sets and enables the Dojo Toolkit library.
     * 
     * @param dojo
     * @return Bootstrap
     */
    public Bootstrap setDojo(Dojo dojo) {

        this.dojo = dojo;
        this.dojo.setOuter(this);

        return this;
    }

    /**
     * Returns object that represents configuration of the Dojo Toolkit library.
     * 
     * @return
     */
    public Dojo getDojo() {

        return dojo;
    }

    /**
     * Adds CSS file to load.
     * 
     * @param stylesheetFile
     * @return Bootstrap
     */
    public Bootstrap addStylesheetFile(String stylesheetFile) {

        cssFiles.add(stylesheetFile);

        return this;
    }

    /**
     * Enables 960gs.
     * 
     * @return Bootstrap
     */
    public Bootstrap enableCss960gs() {

        css960gs = true;

        return this;
    }

    private String getCss960gs() {

        String url = combineURL(dojo.getResourcesUrl(), "960gs/960.css");

        return getStyleSheetElement(url + getUrlVersion()) + "\n";
    }

    /**
     * Adds JavaScript file to load.
     * 
     * @param javascriptFile
     * @return Bootstrap
     */
    public Bootstrap addJavaScriptFile(String javascriptFile) {

        jsFiles.add(javascriptFile);

        return this;
    }

    /**
     * Sets HTTP request that will be used to produce absolute URLs.
     * 
     * @param request
     * @return Bootstrap
     */
    public Bootstrap setRequest(HttpServletRequest request) {

        if(dojo != null) {
            dojo.setRequest(request);
        }

        return this;
    }

    /**
     * Sets parameter added to the end of URL address of CSS and JavaScript
     * links.
     * 
     * @param urlVersion
     * @return
     */
    public Bootstrap setUrlVersion(String urlVersion) {

        this.urlVersion = urlVersion;

        return this;
    }

    /**
     * Returns full URL query added to the end of URL address of CSS and
     * JavaScript links.
     * 
     * @return
     */
    private String getUrlVersion() {

        if(urlVersion != null) {
            return "?v=" + urlVersion;
        }
        else {
            return "";
        }
    }

    /* ================================================================== */

    /**
     * Returns HTML link element to include CSS file.
     * 
     * @return String
     */
    public static String getStyleSheetElement(String file) {

        return "<link rel=\"stylesheet\" type=\"text/css\" href=\"" + file + "\" charset=\"utf-8\" />";
    }

    /**
     * Returns HTML script element to include JavaScript file.
     * 
     * @return String
     */
    public static String getJavaScriptElement(String file) {

        return "<script type=\"text/javascript\" src=\"" + file + "\" charset=\"utf-8\"></script>";
    }

    /* ================================================================== */

    private static String getBaseUrl(HttpServletRequest request) {

        if(request == null) {
            return "";
        }

        if((request.getServerPort() == 80) || (request.getServerPort() == 443)) {
            return request.getScheme() + "://" +
                request.getServerName() +
                request.getContextPath();
        }
        else {
            return request.getScheme() + "://" +
                request.getServerName() + ":" + request.getServerPort() +
                request.getContextPath();
        }
    }

    private static String combineURL(String... urls) {

        StringBuilder sb = new StringBuilder();

        // first
        String url = urls[0];
        if(urls.length > 1 && url.endsWith("/")) {
            url = url.substring(0, url.length() - 1);
        }
        if(!url.equals("")) {
            sb.append(url);
        }

        for(int i = 1; i < urls.length - 1; i++) {
            url = urls[i];
            if(url.startsWith("/")) {
                url = url.substring(1);
            }
            if(url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }
            if(!url.equals("")) {
                sb.append("/");
                sb.append(url);
            }
        }

        // last
        if(urls.length > 1) {
            url = urls[urls.length - 1];
            if(url.startsWith("/")) {
                url = url.substring(1);
            }
            sb.append("/");
            sb.append(url);
        }

        // create relative URL
        url = sb.toString();
        if(url.startsWith("/")) {
            url = url.replaceFirst("/", "");
        }

        return url;
    }

    /* ================================================================== */

    /**
     * Returns auto-generated code to configure user interface components.
     * 
     * @return String
     */
    @Override
    public String toString() {

        StringBuilder sb = new StringBuilder();
        sb.append("<!-- === UI Bootstrap: BEGIN ================================================================================== -->\n");

        // load additional CSS files
        for(String stylesheet: cssFiles) {
            sb.append(getStyleSheetElement(stylesheet + getUrlVersion()) + "\n");
        }

        // load the 960 Grid System
        if(css960gs) {
            sb.append(getCss960gs());
        }

        // load the Dojo Toolkit library
        if(dojo != null) {
            sb.append(dojo);
        }

        // load additional JavaScript files
        for(String file: jsFiles) {
            sb.append(getJavaScriptElement(file + getUrlVersion()) + "\n");
        }

        sb.append("<!-- === UI Bootstrap: END ==================================================================================== -->\n");

        return sb.toString();
    }

}
