#!/bin/bash
#
# File: job/backup-sites.sh
#
# Description: Scheduled job. This script backups all sites.
#
# Usage:
#
#	backup-sites.sh

# include
source $HOST4GE_DIR/sbin/include.sh

T1=`date +%s`
MSG=

# check lock
[ -f $JOB_LOCK_ALL_FILE ] && exit 0
if [ `job_lock_exists $( basename $0 .sh )` == "yes" ]; then
    logger -p local0.notice -t host4ge "job $( basename $0 .sh ) is locked"
    exit 0
fi
# set lock
job_lock_set $( basename $0 .sh )

# ---------- BEGIN ----------

# remove site backups older than seven days
find $INSTALL_DIR/backup/sites/* -mtime +$JOB_BACKUP_SITES_REMOVE_DAYS -exec rm {} \;

# TODO: not all of sites need backup

# backup sites
[ ! -d $INSTALL_DIR/backup/sites ] && mkdir $INSTALL_DIR/backup/sites && chmod 700 $INSTALL_DIR/backup/sites
cd /srv/hosting/accounts
LIST=`ls`
TIMESTAMP=$(date +"%Y%m%d%H%M")
for SITE in $LIST; do
    tar -zcf $SITE-$TIMESTAMP.tar.gz $SITE
    mv $SITE-$TIMESTAMP.tar.gz $INSTALL_DIR/backup/sites
    chmod 400 $INSTALL_DIR/backup/sites/$SITE-$TIMESTAMP.tar.gz
done

# ---------- END ------------

# remove lock
job_lock_unset $( basename $0 .sh )

# measure time
T2=`date +%s`
TIME=$((T2-T1))

# log an event only if it takes longer than specified number of seconds or there is a message
[ $TIME -le $JOB_LOG_EVENT_TIME ] && [ "$MSG" = "" ] && exit 0
if [ "$MSG" = "" ]; then
    logger -p local0.notice -t host4ge "job $( basename $0 .sh ) run (time: $TIME s)"
else
    logger -p local0.notice -t host4ge "job $( basename $0 .sh ) run - $MSG (time: $TIME s)"
fi

exit 0
