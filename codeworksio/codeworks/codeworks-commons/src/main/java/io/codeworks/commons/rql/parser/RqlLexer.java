// Generated from Rql.g4 by ANTLR 4.2
package io.codeworks.commons.rql.parser;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class RqlLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__32=1, T__31=2, T__30=3, T__29=4, T__28=5, T__27=6, T__26=7, T__25=8, 
		T__24=9, T__23=10, T__22=11, T__21=12, T__20=13, T__19=14, T__18=15, T__17=16, 
		T__16=17, T__15=18, T__14=19, T__13=20, T__12=21, T__11=22, T__10=23, 
		T__9=24, T__8=25, T__7=26, T__6=27, T__5=28, T__4=29, T__3=30, T__2=31, 
		T__1=32, T__0=33, IDENTIFIER=34, VALUE=35, SIGN=36, WS=37;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'&'", "'in'", "','", "'or'", "'('", "'=gt='", "'<'", "'!='", "'<='", 
		"'ge'", "'page'", "'and'", "'sort'", "'asc'", "'eq'", "'lt'", "'=le='", 
		"'le'", "'limit'", "')'", "'=ge='", "'gt'", "'ne'", "'='", "'desc'", "';'", 
		"'&&'", "'||'", "'>'", "'=='", "'=lt='", "'>='", "'|'", "IDENTIFIER", 
		"VALUE", "SIGN", "WS"
	};
	public static final String[] ruleNames = {
		"T__32", "T__31", "T__30", "T__29", "T__28", "T__27", "T__26", "T__25", 
		"T__24", "T__23", "T__22", "T__21", "T__20", "T__19", "T__18", "T__17", 
		"T__16", "T__15", "T__14", "T__13", "T__12", "T__11", "T__10", "T__9", 
		"T__8", "T__7", "T__6", "T__5", "T__4", "T__3", "T__2", "T__1", "T__0", 
		"IDENTIFIER", "VALUE", "SIGN", "STRING", "NUMBER", "INTEGER", "FLOAT", 
		"BOOLEAN", "NULL", "WS"
	};


	public RqlLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Rql.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\'\u012d\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7\3"+
		"\7\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f"+
		"\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3\20"+
		"\3\20\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\24\3\24"+
		"\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27"+
		"\3\30\3\30\3\30\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\34\3\34"+
		"\3\34\3\35\3\35\3\35\3\36\3\36\3\37\3\37\3\37\3 \3 \3 \3 \3 \3!\3!\3!"+
		"\3\"\3\"\3#\3#\7#\u00c9\n#\f#\16#\u00cc\13#\3$\3$\3$\3$\5$\u00d2\n$\3"+
		"%\3%\3&\3&\5&\u00d8\n&\3&\7&\u00db\n&\f&\16&\u00de\13&\3&\5&\u00e1\n&"+
		"\3&\3&\3&\5&\u00e6\n&\3&\7&\u00e9\n&\f&\16&\u00ec\13&\3&\5&\u00ef\n&\3"+
		"&\5&\u00f2\n&\3\'\5\'\u00f5\n\'\3\'\3\'\5\'\u00f9\n\'\3\'\5\'\u00fc\n"+
		"\'\3(\6(\u00ff\n(\r(\16(\u0100\3)\6)\u0104\n)\r)\16)\u0105\3)\3)\7)\u010a"+
		"\n)\f)\16)\u010d\13)\3)\3)\6)\u0111\n)\r)\16)\u0112\5)\u0115\n)\3*\3*"+
		"\3*\3*\3*\3*\3*\3*\3*\5*\u0120\n*\3+\3+\3+\3+\3+\3,\6,\u0128\n,\r,\16"+
		",\u0129\3,\3,\2\2-\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r"+
		"\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33"+
		"\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\2M\2O\2Q\2S\2U\2W\'\3\2\n\5\2C\\"+
		"aac|\6\2\62;C\\aac|\4\2--//\4\2\'\',,\7\2\f\f\17\17$$\'\',,\7\2\f\f\17"+
		"\17\'\')),,\3\2\62;\4\2\13\13\"\"\u013b\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3"+
		"\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2"+
		"\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35"+
		"\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)"+
		"\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2"+
		"\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2"+
		"A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2W\3\2\2\2\3Y\3"+
		"\2\2\2\5[\3\2\2\2\7^\3\2\2\2\t`\3\2\2\2\13c\3\2\2\2\re\3\2\2\2\17j\3\2"+
		"\2\2\21l\3\2\2\2\23o\3\2\2\2\25r\3\2\2\2\27u\3\2\2\2\31z\3\2\2\2\33~\3"+
		"\2\2\2\35\u0083\3\2\2\2\37\u0087\3\2\2\2!\u008a\3\2\2\2#\u008d\3\2\2\2"+
		"%\u0092\3\2\2\2\'\u0095\3\2\2\2)\u009b\3\2\2\2+\u009d\3\2\2\2-\u00a2\3"+
		"\2\2\2/\u00a5\3\2\2\2\61\u00a8\3\2\2\2\63\u00aa\3\2\2\2\65\u00af\3\2\2"+
		"\2\67\u00b1\3\2\2\29\u00b4\3\2\2\2;\u00b7\3\2\2\2=\u00b9\3\2\2\2?\u00bc"+
		"\3\2\2\2A\u00c1\3\2\2\2C\u00c4\3\2\2\2E\u00c6\3\2\2\2G\u00d1\3\2\2\2I"+
		"\u00d3\3\2\2\2K\u00f1\3\2\2\2M\u00fb\3\2\2\2O\u00fe\3\2\2\2Q\u0114\3\2"+
		"\2\2S\u011f\3\2\2\2U\u0121\3\2\2\2W\u0127\3\2\2\2YZ\7(\2\2Z\4\3\2\2\2"+
		"[\\\7k\2\2\\]\7p\2\2]\6\3\2\2\2^_\7.\2\2_\b\3\2\2\2`a\7q\2\2ab\7t\2\2"+
		"b\n\3\2\2\2cd\7*\2\2d\f\3\2\2\2ef\7?\2\2fg\7i\2\2gh\7v\2\2hi\7?\2\2i\16"+
		"\3\2\2\2jk\7>\2\2k\20\3\2\2\2lm\7#\2\2mn\7?\2\2n\22\3\2\2\2op\7>\2\2p"+
		"q\7?\2\2q\24\3\2\2\2rs\7i\2\2st\7g\2\2t\26\3\2\2\2uv\7r\2\2vw\7c\2\2w"+
		"x\7i\2\2xy\7g\2\2y\30\3\2\2\2z{\7c\2\2{|\7p\2\2|}\7f\2\2}\32\3\2\2\2~"+
		"\177\7u\2\2\177\u0080\7q\2\2\u0080\u0081\7t\2\2\u0081\u0082\7v\2\2\u0082"+
		"\34\3\2\2\2\u0083\u0084\7c\2\2\u0084\u0085\7u\2\2\u0085\u0086\7e\2\2\u0086"+
		"\36\3\2\2\2\u0087\u0088\7g\2\2\u0088\u0089\7s\2\2\u0089 \3\2\2\2\u008a"+
		"\u008b\7n\2\2\u008b\u008c\7v\2\2\u008c\"\3\2\2\2\u008d\u008e\7?\2\2\u008e"+
		"\u008f\7n\2\2\u008f\u0090\7g\2\2\u0090\u0091\7?\2\2\u0091$\3\2\2\2\u0092"+
		"\u0093\7n\2\2\u0093\u0094\7g\2\2\u0094&\3\2\2\2\u0095\u0096\7n\2\2\u0096"+
		"\u0097\7k\2\2\u0097\u0098\7o\2\2\u0098\u0099\7k\2\2\u0099\u009a\7v\2\2"+
		"\u009a(\3\2\2\2\u009b\u009c\7+\2\2\u009c*\3\2\2\2\u009d\u009e\7?\2\2\u009e"+
		"\u009f\7i\2\2\u009f\u00a0\7g\2\2\u00a0\u00a1\7?\2\2\u00a1,\3\2\2\2\u00a2"+
		"\u00a3\7i\2\2\u00a3\u00a4\7v\2\2\u00a4.\3\2\2\2\u00a5\u00a6\7p\2\2\u00a6"+
		"\u00a7\7g\2\2\u00a7\60\3\2\2\2\u00a8\u00a9\7?\2\2\u00a9\62\3\2\2\2\u00aa"+
		"\u00ab\7f\2\2\u00ab\u00ac\7g\2\2\u00ac\u00ad\7u\2\2\u00ad\u00ae\7e\2\2"+
		"\u00ae\64\3\2\2\2\u00af\u00b0\7=\2\2\u00b0\66\3\2\2\2\u00b1\u00b2\7(\2"+
		"\2\u00b2\u00b3\7(\2\2\u00b38\3\2\2\2\u00b4\u00b5\7~\2\2\u00b5\u00b6\7"+
		"~\2\2\u00b6:\3\2\2\2\u00b7\u00b8\7@\2\2\u00b8<\3\2\2\2\u00b9\u00ba\7?"+
		"\2\2\u00ba\u00bb\7?\2\2\u00bb>\3\2\2\2\u00bc\u00bd\7?\2\2\u00bd\u00be"+
		"\7n\2\2\u00be\u00bf\7v\2\2\u00bf\u00c0\7?\2\2\u00c0@\3\2\2\2\u00c1\u00c2"+
		"\7@\2\2\u00c2\u00c3\7?\2\2\u00c3B\3\2\2\2\u00c4\u00c5\7~\2\2\u00c5D\3"+
		"\2\2\2\u00c6\u00ca\t\2\2\2\u00c7\u00c9\t\3\2\2\u00c8\u00c7\3\2\2\2\u00c9"+
		"\u00cc\3\2\2\2\u00ca\u00c8\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cbF\3\2\2\2"+
		"\u00cc\u00ca\3\2\2\2\u00cd\u00d2\5K&\2\u00ce\u00d2\5M\'\2\u00cf\u00d2"+
		"\5S*\2\u00d0\u00d2\5U+\2\u00d1\u00cd\3\2\2\2\u00d1\u00ce\3\2\2\2\u00d1"+
		"\u00cf\3\2\2\2\u00d1\u00d0\3\2\2\2\u00d2H\3\2\2\2\u00d3\u00d4\t\4\2\2"+
		"\u00d4J\3\2\2\2\u00d5\u00d7\7$\2\2\u00d6\u00d8\t\5\2\2\u00d7\u00d6\3\2"+
		"\2\2\u00d7\u00d8\3\2\2\2\u00d8\u00dc\3\2\2\2\u00d9\u00db\n\6\2\2\u00da"+
		"\u00d9\3\2\2\2\u00db\u00de\3\2\2\2\u00dc\u00da\3\2\2\2\u00dc\u00dd\3\2"+
		"\2\2\u00dd\u00e0\3\2\2\2\u00de\u00dc\3\2\2\2\u00df\u00e1\t\5\2\2\u00e0"+
		"\u00df\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\u00f2\7$"+
		"\2\2\u00e3\u00e5\7)\2\2\u00e4\u00e6\t\5\2\2\u00e5\u00e4\3\2\2\2\u00e5"+
		"\u00e6\3\2\2\2\u00e6\u00ea\3\2\2\2\u00e7\u00e9\n\7\2\2\u00e8\u00e7\3\2"+
		"\2\2\u00e9\u00ec\3\2\2\2\u00ea\u00e8\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb"+
		"\u00ee\3\2\2\2\u00ec\u00ea\3\2\2\2\u00ed\u00ef\t\5\2\2\u00ee\u00ed\3\2"+
		"\2\2\u00ee\u00ef\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\u00f2\7)\2\2\u00f1"+
		"\u00d5\3\2\2\2\u00f1\u00e3\3\2\2\2\u00f2L\3\2\2\2\u00f3\u00f5\5I%\2\u00f4"+
		"\u00f3\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u00fc\5O"+
		"(\2\u00f7\u00f9\5I%\2\u00f8\u00f7\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00fa"+
		"\3\2\2\2\u00fa\u00fc\5Q)\2\u00fb\u00f4\3\2\2\2\u00fb\u00f8\3\2\2\2\u00fc"+
		"N\3\2\2\2\u00fd\u00ff\t\b\2\2\u00fe\u00fd\3\2\2\2\u00ff\u0100\3\2\2\2"+
		"\u0100\u00fe\3\2\2\2\u0100\u0101\3\2\2\2\u0101P\3\2\2\2\u0102\u0104\t"+
		"\b\2\2\u0103\u0102\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u0103\3\2\2\2\u0105"+
		"\u0106\3\2\2\2\u0106\u0107\3\2\2\2\u0107\u010b\7\60\2\2\u0108\u010a\t"+
		"\b\2\2\u0109\u0108\3\2\2\2\u010a\u010d\3\2\2\2\u010b\u0109\3\2\2\2\u010b"+
		"\u010c\3\2\2\2\u010c\u0115\3\2\2\2\u010d\u010b\3\2\2\2\u010e\u0110\7\60"+
		"\2\2\u010f\u0111\t\b\2\2\u0110\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112"+
		"\u0110\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0115\3\2\2\2\u0114\u0103\3\2"+
		"\2\2\u0114\u010e\3\2\2\2\u0115R\3\2\2\2\u0116\u0117\7h\2\2\u0117\u0118"+
		"\7c\2\2\u0118\u0119\7n\2\2\u0119\u011a\7u\2\2\u011a\u0120\7g\2\2\u011b"+
		"\u011c\7v\2\2\u011c\u011d\7t\2\2\u011d\u011e\7w\2\2\u011e\u0120\7g\2\2"+
		"\u011f\u0116\3\2\2\2\u011f\u011b\3\2\2\2\u0120T\3\2\2\2\u0121\u0122\7"+
		"p\2\2\u0122\u0123\7w\2\2\u0123\u0124\7n\2\2\u0124\u0125\7n\2\2\u0125V"+
		"\3\2\2\2\u0126\u0128\t\t\2\2\u0127\u0126\3\2\2\2\u0128\u0129\3\2\2\2\u0129"+
		"\u0127\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012c\b,"+
		"\2\2\u012cX\3\2\2\2\26\2\u00ca\u00d1\u00d7\u00dc\u00e0\u00e5\u00ea\u00ee"+
		"\u00f1\u00f4\u00f8\u00fb\u0100\u0105\u010b\u0112\u0114\u011f\u0129\3\b"+
		"\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}