#!/bin/bash

##
## check dependencies
##

if [ ! -f $INSTALL_DIR/lzo/lib/liblzo2.a ]; then
    echo "Error: OpenVPN requires lzo!"
    exit 1
fi

if [ ! -x $INSTALL_DIR/git/bin/git ]; then
    echo "Error: OpenVPN requires git!"
    exit 1
fi

##
## download
##

pkg_name="openvpn-$VER_OPENVPN"
[ "$packages_force_compilation" == "N" ] && pkg_result=$(package_download $pkg_name)
if [ "$pkg_result" != "success" ]; then
    url="http://swupdate.openvpn.org/community/releases/openvpn-$VER_OPENVPN.tar.gz"
    file=openvpn-$VER_OPENVPN.tar.gz
    result=$(file_download --url $url --file $file --cache-dir-name downloads --check-file-size 1000000)
    if [ "$result" == "error" ]; then
        echo "Error: Unable to download $file file!"
        exit 1
    fi
fi

##
## install
##

exit 0

pkill openvpn

# create user and group
user_create "$OPENVPN_USER" $OPENVPN_UID "$OPENVPN_GROUP" $OPENVPN_GID --shell /bin/bash

if [ "$pkg_result" != "success" ]; then
    echo "Compile OpenVPN:"
    [ -d $INSTALL_DIR/openvpn ] && rm -rf $INSTALL_DIR/openvpn
    tar -zxf openvpn-$VER_OPENVPN.tar.gz
    cd openvpn-$VER_OPENVPN
    [ -f ./error.c ] && replace_in_file '#define LOG_OPENVPN LOG_DAEMON' '#define LOG_OPENVPN LOG_LOCAL2' ./error.c
    [ -f ./src/openvpn/error.c ] && replace_in_file '#define LOG_OPENVPN LOG_DAEMON' '#define LOG_OPENVPN LOG_LOCAL2' ./src/openvpn/error.c
    GIT=/srv/git/bin ./configure \
        --prefix=$INSTALL_DIR/openvpn \
        --sbindir=$INSTALL_DIR/openvpn/bin \
        --disable-plugin-auth-pam \
    && make && make install && echo "OpenVPN installed successfully!" \
    && rm -rf $INSTALL_DIR/openvpn/share \
    && mkdir -p $INSTALL_DIR/openvpn/{bin,clients,conf,keys,log} \
    && cp ./easy-rsa/2.0/* $INSTALL_DIR/openvpn/bin \
    && cp ./sample-config-files/* $INSTALL_DIR/openvpn/conf \
    && ln -s $INSTALL_DIR/openvpn/bin/openssl-1.0.0.cnf $INSTALL_DIR/openvpn/bin/openssl.cnf
    cd ..
    echo "Strip symbols:"
    development_strip_symbols $INSTALL_DIR/openvpn/bin
    echo "Create package:"
    package_create $INSTALL_DIR/openvpn $pkg_name
else
    echo "Install OpenVPN from package:"
    package_restore $pkg_name
fi

# check
if [ ! -f $INSTALL_DIR/openvpn/bin/openvpn ]; then
    echo "Error: OpenVPN has NOT been installed successfully!"
    exit 1
fi

##
## configure
##

echo "Shared library dependencies for $INSTALL_DIR/openvpn/bin/openvpn:"
ldd $INSTALL_DIR/openvpn/bin/openvpn

# create links to the log files
ln -sfv /var/log/openvpn.log $INSTALL_DIR/openvpn/log/openvpn.log
ln -sfv /var/log/openvpn.err $INSTALL_DIR/openvpn/log/openvpn.err

# vars
cat << EOF > $INSTALL_DIR/openvpn/bin/vars
export EASY_RSA=\`pwd\`
export OPENSSL=$CMD_OPENSSL
export PKCS11TOOL="pkcs11-tool"
export KEY_CONFIG=\`\$EASY_RSA/whichopensslcnf \$EASY_RSA\`
export KEY_DIR=$INSTALL_DIR/openvpn/keys
export PKCS11_MODULE_PATH="none"
export PKCS11_PIN="none"
export KEY_SIZE=$OPENVPN_KEY_SIZE
export CA_EXPIRE=3650
export KEY_EXPIRE=3650
export KEY_COUNTRY="$DEVICE_LOCATION"
export KEY_PROVINCE=
export KEY_CITY=
export KEY_ORG="$COMMON_NAME"
export KEY_EMAIL="admin@$DOMAIN"
EOF

# build-ca-wrapper
cat << EOF > $INSTALL_DIR/openvpn/bin/build-ca-wrapper
#!/bin/bash
#
#   ./build-ca-wrapper
#
# \$1 = Country Name (2 letter code)
# \$2 = State or Province Name (full name)
# \$3 = Locality Name (eg, city)
# \$4 = Organization Name (eg, company)
# \$5 = Organizational Unit Name (eg, section)
# \$6 = Common Name (eg, your name or your server's hostname)
# \$7 = Name
# \$8 = Email Address

cd $INSTALL_DIR/openvpn/bin
./clean-all
umask 077; echo "\$1
\$2
\$3
\$4
\$5
\$6
\$7
\$7
\$8" | KEY_SIZE=$OPENVPN_KEY_SIZE ./build-ca \$*
EOF



# openvpn.conf
if [ $(role_has vpnserver) == "yes" ]; then

cat << EOF > $INSTALL_DIR/openvpn/conf/openvpn.conf
dev tun
proto $OPENVPN_PROTOCOL
lport $OPENVPN_PORT
rport $OPENVPN_PORT

server $VPN_NETWORK $VPN_NETMASK
client-to-client
topology subnet

user $OPENVPN_USER
group $OPENVPN_GROUP
persist-tun
persist-key
keepalive 10 60
ping-timer-rem
comp-lzo
script-security 2
;client-connect $INSTALL_DIR/openvpn/bin/proxyarp-connect.sh
;client-disconnect $INSTALL_DIR/openvpn/bin/proxyarp-disconnect.sh

ca $INSTALL_DIR/openvpn/keys/ca.crt
cert $INSTALL_DIR/openvpn/keys/$(hostname).crt
key $INSTALL_DIR/openvpn/keys/$(hostname).key
dh $INSTALL_DIR/openvpn/keys/dh${OPENVPN_KEY_SIZE}.pem
tls-auth $INSTALL_DIR/openvpn/keys/ta.key 0

client-config-dir $INSTALL_DIR/openvpn/clients

daemon openvpn
verb 3
;log-append $INSTALL_DIR/openvpn/log/openvpn.log
status $INSTALL_DIR/openvpn/log/openvpn.status 15
ifconfig-pool-persist $INSTALL_DIR/openvpn/log/openvpn.pool 15
EOF

else

cat << EOF > $INSTALL_DIR/openvpn/conf/openvpn.conf
dev tun
proto $OPENVPN_PROTOCOL
port $OPENVPN_PORT

client
remote $VPN_SERVER_FQDN
nobind

user $OPENVPN_USER
group $OPENVPN_GROUP
persist-tun
persist-key
keepalive 10 60
ping-timer-rem
comp-lzo
script-security 2

ca $INSTALL_DIR/openvpn/keys/ca.crt
cert $INSTALL_DIR/openvpn/keys/$(hostname).crt
key $INSTALL_DIR/openvpn/keys/$(hostname).key
tls-auth $INSTALL_DIR/openvpn/keys/ta.key 1
ns-cert-type server
remote-cert-tls server

daemon openvpn
verb 3
;log-append $INSTALL_DIR/openvpn/log/openvpn.log
status $INSTALL_DIR/openvpn/log/openvpn.status 15
EOF

fi

# copy keys
#if [ -d $SHELLOS_DIR/pkg/resources/openvpn/keys ]; then
#    cp -v $SHELLOS_DIR/pkg/resources/openvpn/keys/{ca.crt,$(hostname).crt,$(hostname).key,ta.key} $INSTALL_DIR/openvpn/keys
#    if [ $(role_has vpnserver) == "yes" ]; then
#        cp -v $SHELLOS_DIR/pkg/resources/openvpn/keys/dh${OPENVPN_KEY_SIZE}.pem $INSTALL_DIR/openvpn/keys
#        cp -v $SHELLOS_DIR/pkg/resources/openvpn/clients/* $INSTALL_DIR/openvpn/clients
#    fi
#fi
#rm -rfv $SHELLOS_DIR/pkg/resources/openvpn

# set files permission
chown -R root:root $INSTALL_DIR/openvpn
chown -R $OPENVPN_USER:$OPENVPN_GROUP $INSTALL_DIR/openvpn/clients
chmod 700 $INSTALL_DIR/openvpn/*
chmod 500 $INSTALL_DIR/openvpn/bin/*
chmod 400 $INSTALL_DIR/openvpn/bin/{Makefile,README}
chmod 400 $INSTALL_DIR/openvpn/clients/* > /dev/null 2>&1
chmod 400 $INSTALL_DIR/openvpn/keys/*.{crt,key,pem} > /dev/null 2>&1

##
## post install
##

[ -f openvpn-${VER_OPENVPN}${PACKAGE_SUFFIX} ] && rm openvpn-${VER_OPENVPN}${PACKAGE_SUFFIX}
[ -f openvpn-$VER_OPENVPN.tar.gz ] && rm openvpn-$VER_OPENVPN.tar.gz
[ -d openvpn-$VER_OPENVPN ] && rm -rf openvpn-$VER_OPENVPN

# save package version
package_add_version "openvpn" "$VER_OPENVPN"

# add directories to create hashes
hashes_add_dir $INSTALL_DIR/openvpn/bin

exit 0

:<<comment

A list of commands needed to setup VPN:
=======================================

# TODO: automate it ->  http://www.manpagez.com/man/1/expect/
#                       http://www.symbianize.com/showpost.php?p=5197765&postcount=408

cd /srv/openvpn/bin
. ./vars
./build-ca-wrapper --pass "$SERVER_LOCATION" "." "." "$COMMON_NAME" "." "$COMMON_NAME CA" "." "admin@$DOMAIN"
./build-key-server --batch $(hostname) # server ??? --pass
./build-dh
openvpn --genkey --secret /srv/openvpn/keys/ta.key
openssl x509 -subject -noout -in /srv/openvpn/keys/$(hostname).crt

# generate key for each client
./build-key --batch $client_hostname # client ??? --pass

# clean up
rm /srv/openvpn/keys/*.old

comment

