package com.code4ge.webtools.gui;

import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

/**
 * <p>
 * This class helps to configure user interface components like scripts and styles. At the moment following are
 * supported:
 * <ul>
 * <li><a href="http://www.dojotoolkit.org/">Dojo Toolkit</a></li>
 * <li><a href="http://css3pie.com/">CSS3PIE</a></li>
 * </ul>
 * </p>
 * <p>
 * <b>Usage example:</b>
 * 
 * <pre>
 * &lt;%=
 * 	new Bootstrap()
 * 		.enableDojo()
 * 		.enableCss3Pie()
 * 		.addStyle("/style.css")
 * 		.addScript("/script.js")
 * %&gt;
 * </pre>
 * 
 * </p>
 * 
 * @author Daniel Stefaniuk
 */
public class Bootstrap {

	/**
	 * <p>
	 * This class helps to configure Dojo Toolkit and provides a bootstrap code that you can include in a generated HTML
	 * page.
	 * </p>
	 * <p>
	 * <b>Usage example:</b>
	 * 
	 * <pre>
	 * &lt;%=
	 * 	new Bootstrap.Dojo()
	 * 		.setVersion(Version.VER_1_6_0)
	 * 		.setEnvironment(Environment.BUILD)
	 * 		.addDojoConfig("locale", "'en'")
	 * 		.addOnReady("alert('It works!');")
	 * %&gt;
	 * </pre>
	 * 
	 * @author Daniel Stefaniuk
	 */
	public static class Dojo {

		public static final String PATH = Bootstrap.PATH + "/dojo"; // FIXME

		/**
		 * Dojo Toolkit version.
		 * 
		 * @author Daniel Stefaniuk
		 */
		public static enum Version {

			VER_1_6_0("1.6.0"),
			SVN("svn");

			private final String name;

			Version(String name) {

				this.name = name;
			}

			@Override
			public String toString() {

				return this.name;
			}
		}

		/**
		 * Dojo Toolkit environment - default or custom build.
		 * 
		 * @author Daniel Stefaniuk
		 */
		public static enum Environment {

			/**
			 * Use Environment.DEFAULT if you do not want to load any resources generated by build process.
			 */
			DEFAULT(""),

			/**
			 * Use Environment.DEVELOPMENT only to speed up page loading in development environment.
			 */
			DEVELOPMENT(""),

			/**
			 * Use Environment.BUILD in production environment.
			 */
			BUILD("build");

			private final String name;

			Environment(String name) {

				this.name = name;
			}

			@Override
			public String toString() {

				return this.name;
			}
		}

		/**
		 * Dojo Toolkit theme.
		 * 
		 * @author Daniel Stefaniuk
		 */
		public static enum Theme {

			NONE(""),
			CLARO("claro");

			private final String name;

			Theme(String name) {

				this.name = name;
			}

			@Override
			public String toString() {

				return this.name;
			}
		}

		/* ================================================================== */

		private Version version = Version.VER_1_6_0;

		private Environment environment = Environment.BUILD;

		private Theme theme = Theme.CLARO;

		/* ================================================================== */

		private String dojoUrl;

		private String resourcesUrl;

		private Set<String> themes;

		private Set<String> styles;

		private Map<String, String> dojoConfig;

		private String dojoCoreUrl;

		private Set<String> layers;

		private Map<String, String> registeredModulePaths;

		private Set<String> requiredClasses;

		private Set<String> onReady;

		/* ================================================================== */

		/**
		 * Constructor
		 */
		public Dojo() {

			styles = new LinkedHashSet<String>();
			themes = new LinkedHashSet<String>();
			dojoConfig = new TreeMap<String, String>();
			layers = new LinkedHashSet<String>();
			registeredModulePaths = new TreeMap<String, String>();
			requiredClasses = new LinkedHashSet<String>();
			onReady = new LinkedHashSet<String>();

			init();
		}

		/**
		 * Sets version.
		 * 
		 * @param version
		 * @return Bootstrap.Dojo
		 */
		public Dojo setVersion(Version version) {

			this.version = version;

			init();

			return this;
		}

		/**
		 * Sets environment.
		 * 
		 * @param environment
		 * @return Bootstrap.Dojo
		 */
		public Dojo setEnvironment(Environment environment) {

			this.environment = environment;

			init();

			return this;
		}

		/**
		 * Sets the base theme.
		 * 
		 * @param theme
		 * @return Bootstrap.Dojo
		 */
		public Dojo setBaseTheme(Theme theme) {

			this.theme = theme;

			return this;
		}

		/**
		 * Adds theme.
		 * 
		 * @param theme
		 * @return Bootstrap.Dojo
		 */
		public Dojo addTheme(String namespace) {

			String[] parts = namespace.split("\\.");

			StringBuilder sb = new StringBuilder();
			for(String part: parts) {
				sb.append("/");
				sb.append(part);
			}
			sb.append("/");
			sb.append(parts[parts.length - 1]);
			sb.append(".css");

			themes.add(sb.toString());

			return this;
		}

		/**
		 * Adds CSS file to load. An URL address must be relative to the Dojo Toolkit's base URL.
		 * 
		 * @param file
		 * @return Bootstrap.Dojo
		 */
		public Dojo addStyle(String file) {

			styles.add(file);

			return this;
		}

		/**
		 * Adds configuration option.
		 * 
		 * @param name
		 * @param value
		 * @return Bootstrap.Dojo
		 */
		public Dojo addDojoConfig(String name, String value) {

			dojoConfig.put(name, value);

			return this;
		}

		/**
		 * Adds custom layer to load.
		 * 
		 * @param name
		 * @return Bootstrap.Dojo
		 */
		public Dojo addLayer(String name) {

			layers.add(name);

			return this;
		}

		/**
		 * Adds path to a user defined namespace to make it visible to the toolkit.
		 * 
		 * @param namespace
		 *            namespace name
		 * @param url
		 *            this must be relative to the Dojo Toolkit's base url
		 * @return Bootstrap.Dojo
		 */
		public Dojo registerModulePath(String namespace, String url) {

			registeredModulePaths.put(namespace, url);

			return this;
		}

		/**
		 * Adds "class" to load.
		 * 
		 * @param clazz
		 * @return Bootstrap.Dojo
		 */
		public Dojo require(String clazz) {

			requiredClasses.add(clazz);

			return this;
		}

		/**
		 * Adds JavaScript code that will be executed on load.
		 * 
		 * @param code
		 * @return Bootstrap.Dojo
		 */
		public Dojo addOnReady(String code) {

			onReady.add(code);

			return this;
		}

		/* ================================================================== */

		private String getDjConfig() {

			StringBuilder sb = new StringBuilder();
			for(String key: dojoConfig.keySet()) {
				sb.append(key + ":" + dojoConfig.get(key) + ",");
			}
			sb.deleteCharAt(sb.length() - 1);

			return sb.toString();
		}

		private String getDojoScriptElement() {

			return "<script type=\"text/javascript\" " +
				"src =\"" + combineURL(
					dojoUrl,
					environment == Environment.DEFAULT ? "" : Environment.BUILD.toString(),
					dojoCoreUrl
				) + "\" charset=\"utf-8\" data-dojo-config=\"" + getDjConfig() + "\"></script>";
		}

		private String getLayerElement(String name) {

			return getJavaScriptElement(combineURL(PATH, "resources/build", name));
		}

		private String getRegisteredModulePaths() {

			StringBuilder sb = new StringBuilder();
			for(String key: registeredModulePaths.keySet()) {
				sb.append(String.format("\tdojo.registerModulePath('%1$s', '%2$s');\n",
					key,
					// localisation will not be loaded if environment == environment.DEVELOPMENT
					combineURL(
						resourcesUrl,
						environment.toString(),
						registeredModulePaths.get(key)
					)));
			}

			return sb.toString();
		}

		private String getRequiredClasses() {

			StringBuilder sb = new StringBuilder();
			for(String clazz: requiredClasses) {
				sb.append("\tdojo.require('" + clazz + "');\n");
			}

			return sb.toString();
		}

		private String getOnReady() {

			StringBuilder sb = new StringBuilder();
			for(String code: onReady) {
				sb.append("\tdojo.ready(function() { " + code + " });\n");
			}

			return sb.toString();
		}

		/* ================================================================== */

		private void init() {

			dojoUrl = combineURL(PATH, version.toString());
			resourcesUrl = combineURL(PATH, "resources");
			dojoCoreUrl = "/dojo/dojo.js";
		}

		/* ================================================================== */

		/**
		 * Returns an auto-generated code to bootstrap the Dojo Toolkit.
		 * 
		 * @return String
		 */
		@Override
		public String toString() {

			StringBuilder sb = new StringBuilder();

			// core style
			sb.append(
				getStyleSheetElement(
					combineURL(
						dojoUrl,
						environment == Environment.DEFAULT ? "" : Environment.BUILD.toString(),
						"/dojo/resources/dojo.css"
					)) + "\n");

			// base theme
			if(theme != Theme.NONE) {
				sb.append(getStyleSheetElement(
					combineURL(
						dojoUrl,
						environment == Environment.DEFAULT ? "" : Environment.BUILD.toString(),
						"/dijit/themes/", theme.toString(),
						theme.toString() + ".css"
					)) + "\n");
			}

			// themes
			if(!themes.isEmpty()) {
				for(String theme: themes) {
					sb.append(getStyleSheetElement(
						combineURL(
							resourcesUrl,
							environment.toString(),
							theme
						)) + "\n");
				}
			}

			// CSS files
			if(!styles.isEmpty()) {
				for(String stylesheet: styles) {
					sb.append(getStyleSheetElement(
						combineURL(
							dojoUrl,
							environment.toString(),
							stylesheet
						)) + "\n");
				}
			}

			// core script
			sb.append(getDojoScriptElement() + "\n");

			// module directories
			boolean bIncludeScript = false;
			StringBuilder temp = new StringBuilder();
			temp.append("<script type=\"text/javascript\">\n");
			if(!registeredModulePaths.isEmpty()) {
				temp.append(getRegisteredModulePaths());
				bIncludeScript = true;
			}
			temp.append("</script>\n");
			if(bIncludeScript) {
				sb.append(temp);
			}

			// layers
			if(!layers.isEmpty() && (environment == Environment.DEVELOPMENT || environment == Environment.BUILD)) {
				for(String name: layers) {
					sb.append(getLayerElement(name) + "\n");
				}
			}

			// required classes and on ready
			bIncludeScript = false;
			temp = new StringBuilder();
			temp.append("<script type=\"text/javascript\">\n");
			if(!requiredClasses.isEmpty() && environment != Environment.BUILD) {
				temp.append(getRequiredClasses());
				bIncludeScript = true;
			}
			if(!onReady.isEmpty()) {
				temp.append(getOnReady());
				bIncludeScript = true;
			}
			temp.append("</script>\n");
			if(bIncludeScript) {
				sb.append(temp);
			}

			return sb.toString();
		}
	}

	/* ================================================================== */

	public static final String PATH = "/"; // FIXME

	private Set<String> styles;

	private String css3pie;

	private Set<String> scripts;

	private Dojo dojo;

	/* ================================================================== */

	/**
	 * Constructor
	 */
	public Bootstrap() {

		styles = new LinkedHashSet<String>();
		scripts = new LinkedHashSet<String>();
	}

	/**
	 * Sets and enables Dojo Toolkit.
	 * 
	 * @param dojo
	 * @return Bootstrap
	 */
	public Bootstrap setDojo(Dojo dojo) {

		this.dojo = dojo;

		return this;
	}

	/**
	 * Enables Dojo Toolkit (default configuration).
	 * 
	 * @return Bootstrap
	 */
	public Bootstrap enableDojo() {

		this.dojo = new Dojo();

		return this;
	}

	/**
	 * Enables CSS3PIE.
	 * 
	 * @return Bootstrap
	 */
	public Bootstrap enableCss3Pie() {

		css3pie = "<!--[if IE]><style type=\"text/css\">" +
			String.format(".css3pie { behavior: url(%1$s/css3pie/PIE.htc); }", PATH) +
			"</style><![endif]-->\n";

		return this;
	}

	/**
	 * Adds CSS file to load.
	 * 
	 * @param file
	 * @return Bootstrap
	 */
	public Bootstrap addStyle(String file) {

		styles.add(file);

		return this;
	}

	/**
	 * Adds JavaScript file to load.
	 * 
	 * @param file
	 * @return Bootstrap
	 */
	public Bootstrap addScript(String file) {

		scripts.add(file);

		return this;
	}

	/* ================================================================== */

	/**
	 * Returns &lt;link&gt; element to include CSS file.
	 * 
	 * @return String
	 */
	public static String getStyleSheetElement(String file) {

		return "<link rel=\"stylesheet\" type=\"text/css\" href=\"" + file + "\" charset=\"utf-8\" />";
	}

	/**
	 * Returns &lt;script&gt; element to include JavaScript file.
	 * 
	 * @return String
	 */
	public static String getJavaScriptElement(String file) {

		return "<script type=\"text/javascript\" src =\"" + file + "\" charset=\"utf-8\"></script>";
	}

	/* ================================================================== */

	private static String combineURL(String... urls) {

		StringBuilder sb = new StringBuilder();

		// first
		String url = urls[0];
		if(urls.length > 1 && url.endsWith("/")) {
			url = url.substring(0, url.length() - 1);
		}
		if(!url.equals("")) {
			sb.append(url);
		}

		for(int i = 1; i < urls.length - 1; i++) {
			url = urls[i];
			if(url.startsWith("/")) {
				url = url.substring(1);
			}
			if(url.endsWith("/")) {
				url = url.substring(0, url.length() - 1);
			}
			if(!url.equals("")) {
				sb.append("/");
				sb.append(url);
			}
		}

		// last
		if(urls.length > 1) {
			url = urls[urls.length - 1];
			if(url.startsWith("/")) {
				url = url.substring(1);
			}
			sb.append("/");
			sb.append(url);
		}

		return sb.toString();
	}

	/* ================================================================== */

	/**
	 * Returns auto-generated code to configure user interface components.
	 * 
	 * @return String
	 */
	@Override
	public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append("<!-- === UI Bootstrap: BEGIN ================================================================================== -->\n");

		// CSS files
		if(!styles.isEmpty()) {
			for(String stylesheet: styles) {
				sb.append(getStyleSheetElement(stylesheet) + "\n");
			}
		}

		// CSS3PIE
		if(css3pie != null) {
			sb.append(css3pie);
		}

		// Dojo Toolkit
		if(dojo != null) {
			sb.append(dojo);
		}

		// JavaScript files
		if(!scripts.isEmpty()) {
			for(String file: scripts) {
				sb.append(getJavaScriptElement(file) + "\n");
			}
		}

		sb.append("<!-- === UI Bootstrap: END ==================================================================================== -->\n");

		return sb.toString();
	}

}
